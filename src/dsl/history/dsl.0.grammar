
Root:
	Grammar

Id:
    id  => @node.id {name: $[0]}

Address:
    Id                  => @node.address {path: [$[0].name]}
    Address "." Id      => @node.address {path: [...$[0].path, $[2].name]}

Grammar:
	Body
	Body endl

Body:
	BodyLine				=> [$[0]]
	Body endl BodyLine		=> $[0].concat $[2]

Specifier:
    Id          => @node.specifier {imported: $[0], local: $[0]}
    Id ":" Id   => @node.specifier {imported: $[0], local: $[2]}
    
SpecifierList:
    Specifier                   => [$[0]]
    SpecifierList Specifier     => [...$[0], $[1]]

Import:
    import ":" Id from String            => @node.import {default: $[2], path: $[4]}
    import "*" ":" Id from String        => @node.import {all: $[3], path: $[5]}
    import SpecifierList from String     => @node.import {dependencies: $[1], path: $[3]}

BodyLine:
    Import
    Precedence
    Def

String: 
    string		=> @node.string {value: if $[0][0] == '\\' then $[0].slice 1 else $[0].slice 1, -1}

StringList:
    String              => [$[0]]
    StringList String   => [...$[0], $[1]]

Precedence:
    ass StringList	=> @node[$[0].slice(1)] {tokens: $[1]}
    ass Id          => @node[$[0].slice(1)] {alias: $[1], tokens: []}


Expression:
	CallExpression
	OrExpression
	String
	Address

ExpressionList:
	Expression	=> [$[0]]
	ExpressionList Expression => [...$[0], $[1]]

AttributeList:
    Attribute                       => [$[0]]
    AttributeList endl Attribute    => $[...$[0], $[2]]

Attribute:
    prec Id                     => @node.prec {value: $[1]}

Production:
	">" ExpressionList			=> @node.production {production: $[1], code: null}
	">" ExpressionList code		=> @node.production {production: $[1], code: $[2]}
	">" eps						=> @node.production {production: [], code: null}
	">" eps	code				=> @node.production {production: [], code: $[2]}

DefLine:
    Def
    Production
    AttributeList endl Production   =>
        production = $[2]
        for {type, value} in $[0]
            production[type] = value
        production

DefLines:
	DefLine					=> [$[0]]
	DefLines endl DefLine	=> [...$[0], $[2]]

Def:
	Id indent DefLines dedent	=> @node.definition {name: $[0], body: $[2]}

Args:
	ExpressionList				=> [$[0]]
	Args "," ExpressionList		=> [...$[0], $[2]]

CallExpression:
	"@" Id "(" Args ")"			=> @node.call {name: $[1], args: $[3]}

OrList:
	String			=> [$[0]]
	OrList String	=> [...$[0], $[1]]

OrExpression:
	"[" OrList "]"	=> @node.or {list: $[1]}
